#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for junos_lldp
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'network'
}

DOCUMENTATION = """
---
module: junos_lldp
version_added: 2.9
short_description: Manage link layer discovery protocol (LLDP) attributes on Juniper JUNOS devices.
description:
  - This module manages link layer discovery protocol (LLDP) attributes on Juniper JUNOS devices.
author: Ganesh Nalawade (@ganeshrn)
options:
  config:
    description: The list of link layer discovery protocol attribute configurations
    type: dict
    suboptions:
      disable:
        description:
          - This argument is a boolean value to enable or disable LLDP.
        type: bool
      interval:
        description:
          - Frequency at which LLDP advertisements are sent (in seconds).
        type: int
      address:
        description:
          - This argument sets the management address from LLDP.
        type: str
      transmit_delay:
        description:
          - Specify the number of seconds the device waits before sending
            advertisements to neighbors after a change is made in local system.
        type: int
      hold_multiplier:
        description:
          - Specify the number of seconds that LLDP information is held before it is
            discarded. The multiplier value is used in combination with the
            C(interval) value.
        type: int
  state:
    description:
      - The state the configuration should be left in.
    type: str
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    default: merged
"""
EXAMPLES = """
# Using merged
# Before state:
# -------------
# user@junos01# # show protocols lldp
#

- name: Merge provided configuration with device configuration
  junos_lldp:
    config:
      interval: 10000
      address: 10.1.1.1
      transmit_delay: 400
      hold_multiplier: 10
    state: merged

# After state:
# -------------
# user@junos01# show protocols lldp
# management-address 10.1.1.1;
# advertisement-interval 10000;
# transmit-delay 400;
# hold-multiplier 10;


# Using replaced
# Before state:
# -------------
# user@junos01# show protocols lldp
# management-address 10.1.1.1;
# advertisement-interval 10000;
# transmit-delay 400;
# hold-multiplier 10;

- name: Replace provided configuration with device configuration
  junos_lldp:
    config:
      address: 20.2.2.2
      hold_multiplier: 30
      disable: False
    state: replaced

# After state:
# -------------
# user@junos01# show protocols lldp
# disable;
# management-address 20.2.2.2;
# hold-multiplier 30;


# Using deleted
# Before state:
# -------------
# user@junos01# show protocols lldp
# management-address 20.2.2.2;
# hold-multiplier 30;

- name: Delete lldp configuration (this will by default remove all lldp configuration)
  junos_lldp:
    state: deleted

# After state:
# -------------
# user@junos01# # show protocols lldp
#


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.junos.argspec.lldp.lldp import LldpArgs
from ansible.module_utils.network.junos.config.lldp.lldp import Lldp


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=LldpArgs.argument_spec,
                           supports_check_mode=True)

    result = Lldp(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
