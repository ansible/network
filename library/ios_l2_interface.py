#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat Inc.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

##############################################
################# WARNING ####################
##############################################
###
### This file is auto generated by the resource
###   module builder playbook.
###
### Do not edit this file manually.
###
### Changes to this file will be over written
###   by the resource module builder.
###
### Changes should be made in the model used to
###   generate this file or in the resource module
###   builder template.
###
##############################################
##############################################
##############################################

"""
The module file for ios_l2_resource
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

#{{ rm|to_doc(model) }}

GENERATOR_VERSION = '1.0'

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'network'}

NETWORK_OS = "ios"
RESOURCE = "l2_interfaces"
COPYRIGHT = "Copyright 2019 Red Hat"

DOCUMENTATION = """
---
  module: ios_l2_interfaces
  version_added: 2.9
  short_description: Manage Layer-2 interface on Cisco IOS devices.
  description: This module provides declarative management of Layer-2 interface on Cisco IOS devices.
  author: Sumit Jaiswal (@justjais)
  options:
    config:
      description: A dictionary of Layer-2 interface options
      type: list
      elements: dict
      suboptions:
        name:
          description:
          - Full name of the interface excluding any logical unit number, i.e. GigabitEthernet0/1.
          type: str
          required: True
        access:
          description:
          - Switchport mode access command to configure the interface as a layer 2 access.
          suboptions:
            vlan:
              description:
              - Configure given VLAN in access port. It's used as the access VLAN ID.
            type: str
        trunk:
          description:
          - Switchport mode trunk command to configure the interface as a Layer 2 trunk.
            Note The encapsulation is always set to dot1q.
          suboptions:
            allowed_vlan:
              description:
              - List of allowed VLANs in a given trunk port. These are the only VLANs that will be
                configured on the trunk.
              type: list
            native_vlan:
              description:
              - Native VLAN to be configured in trunk port. It's used as the trunk native VLAN ID.
              type: str
            encapsulation:
              description:
              - Trunking encapsulation when interface is in trunking mode.
              choices: ['dot1q','isl','negotiate']
              type: str
            pruning_vlan:
              description:
              - Pruning VLAN to be configured in trunk port. It's used as the trunk pruning VLAN ID.
              type: list
    state:
      choices:
      - merged
      - replaced
      - overridden
      - deleted
      default: merged
      description:
      - The state the configuration should be left in
      type: str
"""

EXAMPLES = """
---

# Using merged

# Before state:
# -------------
#
# viosl2#show running-config | section ^interface
# interface GigabitEthernet0/1
#  description Configured by Ansible
#  negotiation auto
# interface GigabitEthernet0/2
#  description This is test
#  switchport access vlan 20
#  switchport mode access
#  media-type rj45
#  negotiation auto

- name: Merge provided configuration with device configuration
  ios_interfaces:
    config:
      - name: GigabitEthernet0/1
        access:
        - vlan: 10
      - name: GigabitEthernet0/2
        trunk:
        - allowed_vlan:
          - 20
          - 40
          native_vlan: 20
          pruning_vlan:
          - 10
          encapsulation: dot1q
    state: merged

# After state:
# ------------
#
# viosl2#show running-config | section ^interface
# interface GigabitEthernet0/1
#  description Configured by Ansible
#  switchport access vlan 10
#  switchport mode access
#  negotiation auto
# interface GigabitEthernet0/2
#  description This is test
#  switchport trunk allowed vlan 20,40
#  switchport trunk encapsulation dot1q
#  switchport trunk native vlan 20
#  switchport trunk pruning vlan 10
#  switchport mode trunk
#  media-type rj45
#  negotiation auto

# Using replaced

# Before state:
# -------------
#
# viosl2#show running-config | section ^interface
# interface GigabitEthernet0/1
#  description Configured by Ansible
#  switchport access vlan 20
#  switchport mode access
#  negotiation auto
# interface GigabitEthernet0/2
#  description This is test
#  switchport access vlan 20
#  switchport mode access
#  media-type rj45
#  negotiation auto

- name: Replaces device configuration of listed l2 interfaces with provided configuration
  ios_interfaces:
    config:
      - name: GigabitEthernet0/2
        trunk:
        - allowed_vlan:
          - 20
          - 40
          native_vlan: 20
          pruning_vlan:
          - 10
          encapsulation: isl
    state: replaced

# After state:
# -------------
#
# viosl2#show running-config | section ^interface
# interface GigabitEthernet0/1
#  description Configured by Ansible
#  switchport access vlan 20
#  switchport mode access
#  negotiation auto
# interface GigabitEthernet0/2
#  description This is test
#  switchport trunk allowed vlan 20,40
#  switchport trunk encapsulation isl
#  switchport trunk native vlan 20
#  switchport trunk pruning vlan 10
#  switchport mode trunk
#  media-type rj45
#  negotiation auto

# Using overridden

# Before state:
# -------------
#
# viosl2#show running-config | section ^interface
# interface GigabitEthernet0/1
#  description Configured by Ansible
#  switchport trunk encapsulation dot1q
#  switchport trunk native vlan 20
#  switchport mode trunk
#  negotiation auto
# interface GigabitEthernet0/2
#  description This is test
#  switchport access vlan 20
#  switchport trunk encapsulation dot1q
#  switchport trunk native vlan 20
#  switchport mode trunk
#  media-type rj45
#  negotiation auto

- name: Override device configuration of all l2 interfaces with provided configuration
  ios_interfaces:
    config:
      - name: GigabitEthernet0/2
        access:
        - vlan: 20
    state: overridden

# After state:
# -------------
#
# viosl2#show running-config | section ^interface
# interface GigabitEthernet0/1
#  description Configured by Ansible
#  negotiation auto
# interface GigabitEthernet0/2
#  description This is test
#  switchport access vlan 20
#  switchport mode access
#  media-type rj45
#  negotiation auto

# Using Deleted

# Before state:
# -------------
#
# viosl2#show running-config | section ^interface
# interface GigabitEthernet0/1
#  description Configured by Ansible
#  switchport access vlan 20
#  switchport mode access
#  negotiation auto
# interface GigabitEthernet0/2
#  description This is test
#  switchport access vlan 20
#  switchport trunk allowed vlan 20,40,60,80
#  switchport trunk encapsulation dot1q
#  switchport trunk native vlan 10
#  switchport trunk pruning vlan 10
#  switchport mode trunk
#  media-type rj45
#  negotiation auto

- name: Delete IOS L2 interfaces as in given arguments
  ios_interfaces:
    config:
      - name: GigabitEthernet0/1
      - name: GigabitEthernet0/2
    state: deleted

# After state:
# -------------
#
# viosl2#show running-config | section ^interface
# interface GigabitEthernet0/1
#  description Configured by Ansible
#  negotiation auto
# interface GigabitEthernet0/2
#  description This is test
#  media-type rj45
#  negotiation auto

"""

RETURN = """
before:
  description: The configuration prior to the model invocation
  returned: always
  sample: The configuration returned will alwys be in the same format of the paramters above.
after:
  description: The resulting configuration model invocation
  returned: when changed
  sample: The configuration returned will alwys be in the same format of the paramters above.
commands:
  description: The set of commands pushed to the remote device
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.ios.config.l2_interfaces.l2_interfaces import L2_Interfaces


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=L2_Interfaces.argument_spec,
                           supports_check_mode=True)

    result = L2_Interfaces(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
