#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for ios_vlans
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'network'
}

NETWORK_OS = "ios"
RESOURCE = "vlans"
COPYRIGHT = "Copyright 2019 Red Hat"

DOCUMENTATION = """
module: ios_vlans
  version_added: 2.9
  short_description: Manage VLANs on Cisco IOS devices.
  description: This module provides declarative management of VLANs on Cisco IOS network devices.
  author: Sumit Jaiswal (@justjais)
  notes:
  - Tested against Cisco IOSv Version 15.2 on VIRL
  options:
    config:
      description: A dictionary of VLANs options
      type: list
      elements: dict
      suboptions:
        name:
          description:
          - Ascii name of the VLAN.
          type: str
        vlan_id:
          description:
          - ID of the VLAN. Range 1-4094
          type: int
          required: True
        mtu:
          description:
          - VLAN Maximum Transmission Unit. Range 576-18190.
          type: int
        state:
          description:
          - Operational state of the VLAN
          type: str
          choices:
          - active
          - suspend
        shutdown:
          description:
          - Shutdown VLAN switching.
          type: bool
    state:
      description:
      - The state the configuration should be left in
      type: str
      choices:
      - merged
      - replaced
      - overridden
      - deleted
      default: merged
"""
EXAMPLES = """
# Using deleted

<placeholder for the configuration example prior to module invocation>

- name: Configure vlans
  myos_interfaces:
    operation: deleted

<placeholder for the configuration example after module invocation>


# Using merged

<placeholder for the configuration example prior to module invocation>

- name: Configure vlans
  nxos_interfaces:
    config:
      - name: Ethernet1/1
        description: 'Configured by Ansible'
        enable: True
      - name: Ethernet1/2
        description: 'Configured by Ansible'
        enable: False
    operation: merged

<placeholder for the configuration example after module invocation>


# Using overridden

<placeholder for the configuration example prior to module invocation>

- name: Configure vlans
  myos_interfaces:
    config:
      - name: Ethernet1/1
        description: 'Configured by Ansible'
        enable: True
      - name: Ethernet1/2
        description: 'Configured by Ansible'
        enable: False
    operation: overridden

<placeholder for the configuration example after module invocation>


# Using replaced

<placeholder for the configuration example prior to module invocation>

- name: Configure vlans
  nxos_interfaces:
    config:
      - name: Ethernet1/1
        description: 'Configured by Ansible'
        enable: True
      - name: Ethernet1/2
        description: 'Configured by Ansible'
        enable: False
    operation: replaced

<placeholder for the configuration example after module invocation>


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.network.ios.argspec.vlans.vlans import VlansArgs
from ansible.module_utils.network.ios.config.vlans.vlans import Vlans


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=VlansArgs.argument_spec,
                           supports_check_mode=True)

    result = Vlans(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
