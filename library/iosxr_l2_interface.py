#!/usr/bin/python
# -*- coding: utf-8 -*-
# {{ rm['COPYRIGHT'] }}
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

##############################################
################# WARNING ####################
##############################################
###
### This file is auto generated by the resource
###   module builder playbook.
###
### Do not edit this file manually.
###
### Changes to this file will be over written
###   by the resource module builder.
###
### Changes should be made in the model used to
###   generate this file or in the resource module
###   builder template.
###
##############################################
##############################################
##############################################

"""
The module file for iosxr_l2_interfaces
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

#{{ rm|to_doc(model) }}

GENERATOR_VERSION = '1.0'

ANSIBLE_METADATA = {'metadata_version': '1.1',
                   'status': ['preview'],
                   'supported_by': 'network'}

NETWORK_OS = "iosxr"
RESOURCE = "l2_interfaces"
COPYRIGHT = "Copyright 2019 Red Hat"

DOCUMENTATION = """
---
  module: iosxr_l2_interfaces
  version_added: 2.9
  short_description: Manage Layer-2 interface on Cisco IOS-XR devices.
  description: This module provides declarative management of Layer-2 interface on Cisco IOS-XR devices.
  author: Sumit Jaiswal (@justjais)
  options:
    config:
      description: A dictionary of Layer-2 interface options
      type: list
      elements: dict
      suboptions:
        name:
          description:
          - Full name of the interface/sub-interface excluding any logical unit number,
            i.e. GigabitEthernet0/0/0/1 or GigabitEthernet0/0/0/1.100.
          type: str
          required: True
        native_vlan:
          description:
          - Configure a native VLAN ID for the trunk
          type: str
        l2transport:
          description:
          - Switchport mode access command to configure the interface as a layer 2 access.
          type: bool
        l2protocol:
          description:
          - Configures Layer 2 protocol tunneling and protocol data unit (PDU) filtering on an interface.
          suboptions:
            cdp:
              description:
              - Cisco Discovery Protocol (CDP) tunneling and data unit parameters.
              choices: ['drop','forward', 'tunnel']
              type: str
            pvst:
              description:
              - Configures VLAN spanning tree protocol tunneling and data unit parameters.
              choices: ['drop','forward', 'tunnel']
              type: str
            stp:
              description:
              - Spanning tree protocol tunneling and data unit parameters.
              choices: ['drop','forward', 'tunnel']
              type: str
            vtp:
              description:
              - VLAN trunk protocol tunneling and data unit parameters.
              choices: ['drop','forward', 'tunnel']
              type: str
        q_vlan:
          description:
          - 802.1Q VLAN configuration. Note that it can accept either 2 VLAN IDs when configuring Q-in-Q vlan,
            or it shall accept 1 VLAN ID and 'any' as input list when configuring Q-in-any vlan as input.
          type: str
        propagate:
          description:
          - Propagate Layer 2 transport events. Note that it will work only when l2tranport param is set
            to True.
          type: bool
    state:
      choices:
      - merged
      - replaced
      - overridden
      - deleted
      default: merged
      description:
      - The state the configuration should be left in
      type: str
"""


EXAMPLES = """
---

# Using merged

# Before state:
# -------------
#
# viosxr#show running-config interface
# interface GigabitEthernet0/0/0/3
#  description Ansible Network
#  vrf custB
#  ipv4 address 10.10.0.2 255.255.255.0
#  duplex half
#  shutdown
# !
# interface GigabitEthernet0/0/0/4
#  description Test description
# !

- name: Merge provided configuration with device configuration
  iosxr_l2_interfaces:
    config:
      - name: GigabitEthernet0/0/0/3
        native_vlan: 20
      - name: GigabitEthernet0/0/0/4
        native_vlan: 40
        l2transport: True
        l2protocol:
        - stp: tunnel
      - name: GigabitEthernet0/0/0/3.900
        l2transport: True
        q_vlan:
        - 20
        - 40
    state: merged

# After state:
# ------------
#
# viosxr#show running-config interface
# interface GigabitEthernet0/0/0/3
#  description Ansible Network
#  vrf custB
#  ipv4 address 10.10.0.2 255.255.255.0
#  duplex half
#  shutdown
#  dot1q native vlan 20
# !
# interface GigabitEthernet0/0/0/4
# description Test description
#  dot1q native vlan 10
#  l2transport
#   l2protocol stp tunnel
#  !
# !
# interface GigabitEthernet0/0/0/3.900 l2transport
#  dot1q vlan 20 40
# !

# Using replaced

# Before state:
# -------------
#
# viosxr#show running-config interface
# interface GigabitEthernet0/0/0/3
#  description Ansible Network
#  vrf custB
#  ipv4 address 10.10.0.2 255.255.255.0
#  duplex half
#  shutdown
#  dot1q native vlan 20
# !
# interface GigabitEthernet0/0/0/4
# description Test description
#  dot1q native vlan 10
#  l2transport
#   l2protocol stp tunnel
#  !
# !
# interface GigabitEthernet0/0/0/3.900 l2transport
#  dot1q vlan 20 40
# !

- name: Replaces device configuration of listed interfaces with provided configuration
  iosxr_interfaces:
    config:
      - name: GigabitEthernet0/0/0/4
        native_vlan: 40
        l2transport: True
        l2protocol:
        - stp: forward
      - name: GigabitEthernet0/0/0/3.900
        q_vlan:
        - 20
        - any
    state: overridden

# After state:
# -------------
#
# viosxr#show running-config interface
# interface GigabitEthernet0/0/0/3
#  description Ansible Network
#  vrf custB
#  ipv4 address 10.10.0.2 255.255.255.0
#  duplex half
#  shutdown
#  dot1q native vlan 20
# !
# interface GigabitEthernet0/0/0/4
# description Test description
#  dot1q native vlan 40
#  l2transport
#   l2protocol stp forward
#  !
# !
# interface GigabitEthernet0/0/0/3.900 l2transport
#  dot1q vlan 20 any
# !

# Using overridden

# Before state:
# -------------
#
# viosxr#show running-config interface
# interface GigabitEthernet0/0/0/3
#  description Ansible Network
#  vrf custB
#  ipv4 address 10.10.0.2 255.255.255.0
#  duplex half
#  shutdown
#  dot1q native vlan 20
# !
# interface GigabitEthernet0/0/0/4
# description Test description
#  dot1q native vlan 10
#  l2transport
#   l2protocol stp tunnel
#  !
# !
# interface GigabitEthernet0/0/0/3.900 l2transport
#  dot1q vlan 20 40
# !

- name: Override device configuration of all interfaces with provided configuration
  iosxr_interfaces:
    config:
      - name: GigabitEthernet0/0/0/4
        native_vlan: 40
        l2transport: True
        l2protocol:
        - stp: forward
      - name: GigabitEthernet0/0/0/3.900
        q_vlan:
        - 20
        - any
    state: overridden

# After state:
# -------------
#
# viosxr#show running-config interface
# interface GigabitEthernet0/0/0/3
#  description Ansible Network
#  vrf custB
#  ipv4 address 10.10.0.2 255.255.255.0
#  duplex half
#  shutdown
# !
# interface GigabitEthernet0/0/0/4
# description Test description
#  dot1q native vlan 40
#  l2transport
#   l2protocol stp forward
#  !
# !
# interface GigabitEthernet0/0/0/3.900
#  dot1q vlan 20 any
# !

# Using deleted
  
# Before state:
# -------------
#
# viosxr#show running-config interface
# interface GigabitEthernet0/0/0/3
#  description Ansible Network
#  vrf custB
#  ipv4 address 10.10.0.2 255.255.255.0
#  duplex half
#  shutdown
#  dot1q native vlan 20
# !
# interface GigabitEthernet0/0/0/4
#  description Test description
#  dot1q native vlan 10
#  l2transport
#   l2protocol stp tunnel
#  !
# !

- name: Delete attributes of given interfaces (Note: This won't delete the interface itself)
  iosxr_l2_interfaces:
    config:
      - name: GigabitEthernet0/0/0/3
      - name: GigabitEthernet0/0/0/4
    state: deleted

# After state:
# ------------
#
# viosxr#show running-config interface
# interface GigabitEthernet0/0/0/3
#  description Ansible Network
#  vrf custB
#  ipv4 address 10.10.0.2 255.255.255.0
#  duplex half
#  shutdown
# !
# interface GigabitEthernet0/0/0/4
#  description Test description
# !

"""

RETURN = """
before:
  description: The configuration prior to the model invocation
  returned: always
  sample: The configuration returned will alwys be in the same format of the paramters above.
after:
  description: The resulting configuration model invocation
  returned: when changed
  sample: The configuration returned will alwys be in the same format of the paramters above.
commands:
  description: The set of commands pushed to the remote device
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.iosxr.config.l2_interfaces.l2_interfaces import L2_Interfaces


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=L2_Interfaces.argument_spec,
                           supports_check_mode=True)

    result = L2_Interfaces(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()

